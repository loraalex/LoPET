import React from "react";

import { globalStyles } from "../../shared/styles";
import { withStyles } from "@material-ui/core";
import { makeStyles } from "@material-ui/core/styles";
import SettingsIcon from "@material-ui/icons/Settings";
import { useParams } from "react-router-dom";
import Loading from "../Loading";
import NoRecourse from "../NoResource";
import moment from "moment";

import NotFound from "../NotFound";
import { connect } from "react-redux";
import Button from "@material-ui/core/Button";
import Grid from "@material-ui/core/Grid";
import Paper from "@material-ui/core/Paper";
import MyTable from "../../components/MyTable";
import { resetSelectedResult } from "../../actions/shared";
import { getPentestDetail } from "../../actions/security";
import { setRowsPerPage } from "../../actions/shared";
import { withRouter } from "react-router-dom";
import newStyles from "../../shared/newStyles";

const getColumnName = (column) => {
  console.log(column)
  switch (column) {
    case "Started at":
      return "attack.start_at";
    case "Name":
      return "attack.type";
    case "Status":
      return "attack.status";
    case "Frames":
      return "message_count";
  }
};  

const headCells = [
  { name: "Started at", content: "Started at" },
  { name: "Name", content: "Name" },
  { name: "Status", content: "Status" },
  { name: "Frames", content: "Frames" },
];

function PentestDetail({
  refresh,
  callRefresh,
  resetSelectedResult,
  getPentestDetail,
  selected,
  handleSettingsClose,
  openSettings,
  classes,
  handleConfirmClose,
  rowsPerPage,
  setRowsPerPage,
  history,
  countOfpenTests
}) {
  let { id } = useParams();

  const localClasses = useStyles();

  const [page, setPage] = React.useState(0);
  const [orderBy, setOrderBy] = React.useState(0);
  const [order, setOrder] = React.useState("asc");
  const [selectedAttack, selectAttack] = React.useState(null);

  React.useEffect(() => {
    getPentestDetail({ 
      testId: id,
      order,
      rowsPerPage,
      page: 1,
      column: getColumnName(headCells[orderBy]),
    });
    return () => {
      resetSelectedResult();
    };
  }, [getPentestDetail, id, resetSelectedResult]);

  React.useEffect(() => {
    if (refresh) {
      getPentestDetail({ 
        testId: id,
        order,
        rowsPerPage,
        page: 1,
        column: getColumnName(headCells[orderBy]),
      });
    }
  }, [
    id, 
    resetSelectedResult, 
    refresh, 
    getPentestDetail, 
    order,
    orderBy,
    page,
  ]);

  if (selected.data === undefined) {
    return <NoRecourse recourse={id} />;
  }

  if (selected.data === null || selected.type !== "pentest") {
    return <Loading />;
  }

  

  const rows = selected.data.attacks.map((e, i) => {
    return [
      {
        
        name: "Show more details",
        content: e.start_at == null ? "Not started yet" : moment(e?.start_at).format("DD-MM-YYYY HH:mm") || "none",
      },
      {
        name: "Show more details",
        content: e?.type || "none",
      },
      {
        name: "Show more details",
        content: e.status || "none", //(e.attacks?.map((a) => a.type))[0]
      },  
      {
        name: "Show more details",
        content: e.message_count, //(e.attacks?.map((a) => a.type))[0]
      },     
    ];
  });

  const allFrames = () => {
    let count = 0;
    for(const attack of selected?.data?.attacks ?? []) {
      count += parseInt(attack.message_count)
    }
    return count;
  }

  const successful_attacks = () => {
    let count = 0;
    for(const attack of selected?.data?.attacks ?? []) {

      if(attack.status === 'FINISHED - PASS')
        count += 1
    }

    return count + '/' + selected?.data?.attacks?.length
  }


  const attackDuration = () => {
    const start = new Date(selected?.data?.test_start)
    const end = selected?.data?.test_finish ? new Date(selected?.data?.test_finish) : new Date()

    const durationInMillis = end.getTime() - start.getTime();

    // Calculate duration in days and hours
    const durationInDays = Math.floor(durationInMillis / (1000 * 60 * 60 * 24));
    const durationInHours = Math.floor((durationInMillis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const durationInMinutes = Math.floor((durationInMillis % (1000 * 60 * 60)) / (1000 * 60));

    return `${durationInDays} days, ${durationInHours} hours ${durationInMinutes} minutes`;
  }

  const handleOnRowClick = (index) => {
    
    // const attack = selected.data.attacks[index];
    // (attack) => { selectAttack(attack) };
    // console.log(selectedAttack)
    history.push(`/security/attack/${selected.data.attacks[index].id}`);
  }

  return (
    <React.Fragment>
      <Grid container spacing={3}>
      <Grid item xs={12}>
        <Paper className={classes.paper}>
          <MyTable
            rows={rows}
            headCells={headCells}
            tableTitle={"Attacks in this test"}
            onRowClick={handleOnRowClick}
            countOfRows={countOfpenTests}
            showPagination={true}
            rowsPerPageOptions={[5, 10, 25]}
            rowsPerPage={rowsPerPage}
            setRowsPerPage={setRowsPerPage}
            page={page}
            setPage={setPage}
            orderBy={orderBy}
            setOrderBy={setOrderBy}
            order={order}
            setOrder={setOrder}
            fetchRecords={({ order, rowsPerPage, page, column, id }) => {
              getPentestDetail({ 
                testId: id,
                order,
                rowsPerPage,
                page,
                column: getColumnName(column),
              });
            }}
            
          />
        </Paper>
      </Grid>

      <Grid item xs={12}>
        <Paper className={classes.paper}>
            <Grid>
              <Grid item>
                Count of all frames: {allFrames()}
              </Grid>
              <Grid item>
                Execution time: {attackDuration()}
              </Grid>
              <Grid item>
                Successful attacks: {successful_attacks()}
              </Grid>
              <Grid item>
                Victim device address: {selected?.data?.target_address}
              </Grid>
            </Grid>
        </Paper>
      </Grid>
    </Grid>

    <Grid container justify="center" xs={12}>
      <Grid item>
        <div style={newStyles.dateInput}>
          <Button className={localClasses.saveButton}
            variant="contained"
            color="primary"
            onClick={console.log(selected)}
          >
            EXPORT TO PDF
          </Button>
        </div>
      </Grid>
    </Grid>
    </React.Fragment>
  );
}

const useStyles = makeStyles((theme) => ({
  chartPaper: {
    height: "100%",
  },
}));

const mapStateToProps = ({ result }) => ({
  selected: result.selected,
  countOfpenTests:  result?.selected?.data?.attacks?.length ?? 0,
  rowsPerPage: result.rowsPerPage,
});

const mapDispatchToProps = {
  resetSelectedResult,
  getPentestDetail,
  setRowsPerPage,
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withRouter(withStyles(globalStyles)(PentestDetail)));
