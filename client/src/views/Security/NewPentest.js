import React from "react";

import { globalStyles } from "../../shared/styles";
import { FormGroup, Radio, withStyles } from "@material-ui/core";
import { connect } from "react-redux";
import Button from "@material-ui/core/Button";
import Grid from "@material-ui/core/Grid";
import TextField from "@material-ui/core/TextField";
import Checkbox from "@material-ui/core/Checkbox";
import { useFormik } from "formik";
import * as yup from "yup";
import devConsole from "../../devConsole";
import Typography from "@material-ui/core/Typography";
import CircularProgress from "@material-ui/core/CircularProgress";
import { makeStyles } from "@material-ui/core/styles";
import FormControl from "@material-ui/core/FormControl";
import RadioGroup from "@material-ui/core/RadioGroup";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import FormLabel from "@material-ui/core/FormLabel";
import securityApi from "../../api/securityApi";


function NewPentest({ 
  handleClose,
  handleConfirmClose ,
}) {
  const localClasses = useStyles();

  const [loading, setLoading] = React.useState(false);
  

  let name = ''
  let address = ''
  let attacks = {
    replay: false,
    eavesdropping: false,
  }
  let isAddr = "1";
  let isScheduled = "0";
  let dateScheduled = '08-05-2023   19:00';
  let is16bit = "1";
  let gap = 10000;

  const validationSchema = yup.object({
    name: yup
      .string("New Test Name")
      .max(20, "Test Name shouldn't be more then 20 characters length")
      .required("New Test Name is required"),
    address: yup
      .string("New Test Description")
      .required("New Application Description is required"),
  });

  const formik = useFormik({
    initialValues: {
      name,
      address,
      attacks,
      isAddr,
      isScheduled,
      dateScheduled,
      is16bit,
      gap
    },
    validationSchema: validationSchema,
    onSubmit: async (values, { resetForm, setErrors }) => {
      setLoading(true);
      try {
        console.log(formik.values)
        await securityApi.createPentest(formik.values);
        // await applicationApi.setNewApplicationName({
        //   newApplicationName: values.newApplicationName,
        //   newApplicationDescription: values.newApplicationDescription,
        //   applicationId: application.id,
        // });
        handleConfirmClose();
        resetForm({});
      } catch (error) {
        devConsole.log(error);
        setErrors({ serverError: "Something went wrong" });
      }
      setLoading(false);
    },
  });

  return (
    <React.Fragment>
      <form noValidate onSubmit={formik.handleSubmit}>
            {!!formik.errors.serverError ? (
              <Typography color={"error"}>
                {formik.errors.serverError}
              </Typography>
            ) : null}
          <Grid container>
            <Grid item xs={2}/>

            <Grid container spacing={2} item xs={10}>
            <Grid item xs={8}>  
              <FormControl>
                <FormLabel>Attack with address</FormLabel>
                <RadioGroup
                  name="isAddr"
                  value={formik.values.isAddr}
                  onChange={formik.handleChange}
                >
                  <FormControlLabel value="0" control={<Radio color="primary"/>} label="No Address"/>
                  <FormControlLabel value="1" control={<Radio color="primary"/>} label="Address"/>
                </RadioGroup>
              </FormControl>
            </Grid>

            {!! (formik.values.isAddr == "1") ? (
              <Grid item xs={8}> 
                <TextField
                  variant="outlined"
                  margin="normal"
                  required
                  fullWidth
                  id="newApplicationDescription"
                  label="Victim Device Address"
                  name="address"
                  value={formik.values.address}
                  onChange={formik.handleChange}
                  disabled={loading}
                  // disabled={updateCredentialsLoading}
                  error={
                    formik.touched.address &&
                    Boolean(formik.errors.address)
                  }
                  helperText={
                    formik.touched.address &&
                    formik.errors.address
                  }
                />
              </Grid>
            ) : null}
            
            
            <Grid item xs={8}> 
              <TextField
                variant="outlined"
                margin="normal"
                required
                fullWidth
                id="name"
                label="Name of test"
                name="name"
                value={formik.values.name}
                onChange={formik.handleChange}
                disabled={loading}
                // disabled={updateCredentialsLoading}
                error={
                  formik.touched.name &&
                  Boolean(formik.errors.name)
                }
                helperText={
                  formik.touched.name &&
                  formik.errors.name
                }
              />
            </Grid>

            <Grid item xs={12}> 
              <FormControl>
                <FormLabel>Counter</FormLabel>
                <RadioGroup
                  name="is16bit"
                  value={formik.values.is16bit}
                  onChange={formik.handleChange}
                >
                  <FormControlLabel value="1" control={<Radio color="primary"/>} label="16-bit"/>
                  <FormControlLabel value="0" control={<Radio color="primary"/>} label="32-bit"/>
                </RadioGroup>
              </FormControl>
            </Grid>

            <Grid item xs={3}>  
              <FormLabel>Choose attacks for test</FormLabel>     
              <FormGroup>
                <FormControlLabel control={
                  <Checkbox 
                    name='attacks.replay'
                    label='Eavesdropping Attack'
                    value={formik.values.attacks.replay}
                    onChange={formik.handleChange}
                    color="primary"
                  />
                 } label="Replay Attack" />
                <FormControlLabel control={
                  <Checkbox 
                    name='attacks.eavesdropping'
                    value={formik.values.attacks.eavesdropping}
                    onChange={formik.handleChange}
                    color="primary"
                  />
                } label="Eavesdropping" />
              </FormGroup>
            </Grid> 

            <Grid item xs={9}>
              {!!formik.values.attacks.replay ? (
                  
                  <TextField
                    label="Gap"
                    variant="outlined"
                    margin="normal"
                    type="number"
                    name="gap"
                    value={formik.values.gap}
                    onChange={formik.handleChange}
                  />
                
              ) : null}
            </Grid>


            <Grid item xs={3}>   
              <FormControl>
                <FormLabel>Test execution</FormLabel>
                <RadioGroup
                  name="isScheduled"
                  value={formik.values.isScheduled}
                  onChange={formik.handleChange}
                >
                  <FormControlLabel value="1" control={<Radio color="primary"/>} label="Schedule"/>
                  <FormControlLabel value="0" control={<Radio color="primary"/>} label="Launch now"/>
                </RadioGroup>
              </FormControl>
            </Grid>

            <Grid item xs={9}> 

              {!! (formik.values.isScheduled == "1") ? (
                  
                  <TextField
                    label="Choose date and time"
                    variant="outlined"
                    margin="normal"
                    name="dateScheduled"
                    value={formik.values.dateScheduled}
                    onChange={formik.handleChange}
                  />
                
              ) : null}
              
            </Grid>
          
          </Grid>
          <Grid item xs={8}>

          </Grid>
          <Grid item xs={4}>
            <div className={localClasses.wrapper}>
              <Button className={localClasses.saveButton}
                disabled={loading}
                variant="contained"
                type="submit"
                color="primary"
              >
                SAVE
              </Button>
              {loading && (
                <CircularProgress
                  size={24}
                  className={localClasses.buttonProgress}
                />
              )}
            </div>
          </Grid>
        </Grid>


      </form>
    </React.Fragment>
  );
}

const useStyles = makeStyles((theme) => ({
  root: {
    margin: 0,
    padding: theme.spacing(2),
  },
  closeButton: {
    position: "absolute",
    right: theme.spacing(1),
    top: theme.spacing(1),
    color: theme.palette.grey[500],
  },
  textArea: {
    borderRadius: 5,
    resize: "none",
    width: "100%",
    maxWidth: 250,
    paddingRight: 0,
  },
  formControl: {
    maxWidth: 220,
    width: "100%",
  },
  selectEmpty: {
    marginTop: theme.spacing(2),
  },
  wrapper: {
    position: "relative",
  },
  saveButton: {
    width: "150px",
  },
  buttonProgress: {
    position: "absolute",
    top: "50%",
    left: "50%",
    marginTop: -12,
    marginLeft: -12,
  },
}));



const mapStateToProps = ({ result }) => ({
  selected: result.selected,
});

const mapDispatchToProps = {};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(globalStyles)(NewPentest));
